[
  {
    "description": "C# naming settings",
    "subtree": [
      "CodeStyle",
      "Naming",
      "CSharpNaming"
    ],
    "settings": {
      "enumerations": {},
      "items": [
        {
          "name": "ApplyAutoDetectedRules",
          "description": "Should auto-detected rules be applied",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "EventHandlerPatternLong",
          "description": "Event handler name pattern (long version with object name)",
          "type": "String",
          "isObsolete": false,
          "defaultValue": "$object$On$event$"
        },
        {
          "name": "EventHandlerPatternShort",
          "description": "Event handler name pattern",
          "type": "String",
          "isObsolete": false,
          "defaultValue": "On$event$"
        },
        {
          "name": "ExceptionName",
          "description": "Default name for exception variable",
          "type": "String",
          "isObsolete": false,
          "defaultValue": "e"
        },
        {
          "name": "SupportVSEventNamingPattern",
          "description": "Support Visual Studio event naming pattern",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        }
      ]
    }
  },
  {
    "description": "C# language settings",
    "subtree": [
      "CodeInspection",
      "CSharpLanguageProject"
    ],
    "settings": {
      "enumerations": {
        "ReSharperSettingsCSharpLanguageLevel": [
          {
            "value": "Default",
            "description": "Default"
          },
          {
            "value": "CSharp20",
            "description": "CSharp20"
          },
          {
            "value": "CSharp30",
            "description": "CSharp30"
          },
          {
            "value": "CSharp40",
            "description": "CSharp40"
          },
          {
            "value": "CSharp50",
            "description": "CSharp50"
          },
          {
            "value": "CSharp60",
            "description": "CSharp60"
          },
          {
            "value": "CSharp70",
            "description": "CSharp70"
          },
          {
            "value": "CSharp71",
            "description": "CSharp71"
          },
          {
            "value": "CSharp72",
            "description": "CSharp72"
          },
          {
            "value": "CSharp73",
            "description": "CSharp73"
          },
          {
            "value": "CSharp80",
            "description": "CSharp80"
          },
          {
            "value": "CSharp90",
            "description": "CSharp90"
          },
          {
            "value": "Latest",
            "description": "Latest"
          },
          {
            "value": "Experimental",
            "description": "Experimental"
          }
        ]
      },
      "items": [
        {
          "name": "LanguageLevel",
          "description": "C# language level",
          "type": "ReSharperSettingsCSharpLanguageLevel",
          "isObsolete": false,
          "defaultValue": "Default"
        }
      ]
    }
  },
  {
    "description": "C# file layout pattern",
    "subtree": [
      "CodeStyle",
      "CSharpFileLayoutPatterns"
    ],
    "settings": {
      "enumerations": {},
      "items": [
        {
          "name": "Pattern",
          "description": "File Layout Pattern",
          "type": "String",
          "isObsolete": false,
          "defaultValue": ""
        }
      ]
    }
  },
  {
    "description": "C# member order pattern",
    "subtree": [
      "CodeStyle",
      "CSharpMemberOrderPattern"
    ],
    "settings": {
      "enumerations": {
        "CSharpMemberOrderPatternType": [
          {
            "value": "WithoutRegions",
            "description": "Default layout without regions"
          },
          {
            "value": "UsingRegions",
            "description": "Default layout using regions"
          },
          {
            "value": "CustomLayout",
            "description": "Custom layout"
          }
        ]
      },
      "items": [
        {
          "name": "CustomPattern",
          "description": "Custom pattern. Use null for default pattern",
          "type": "String",
          "isObsolete": false,
          "defaultValue": ""
        },
        {
          "name": "LayoutType",
          "description": "Layout type",
          "type": "CSharpMemberOrderPatternType",
          "isObsolete": false,
          "defaultValue": "WithoutRegions"
        }
      ]
    }
  },
  {
    "description": "CSharp var keyword usage settings",
    "subtree": [
      "CodeStyle",
      "CSharpVarwordUsage"
    ],
    "settings": {
      "enumerations": {
        "VariableStyle": [
          {
            "value": "CanUseEither",
            "description": "CanUseEither"
          },
          {
            "value": "DoNotChange",
            "description": "DoNotChange"
          },
          {
            "value": "UseVar",
            "description": "Use 'var'"
          },
          {
            "value": "UseVarWhenEvident",
            "description": "Use 'var' when evident"
          },
          {
            "value": "UseExplicitType",
            "description": "Use explicit type"
          }
        ]
      },
      "items": [
        {
          "name": "ForBuiltInTypes",
          "description": "For built-in types",
          "type": "VariableStyle",
          "isObsolete": false,
          "defaultValue": "UseVar"
        },
        {
          "name": "ForOtherTypes",
          "description": "Elsewhere",
          "type": "VariableStyle",
          "isObsolete": false,
          "defaultValue": "UseVar"
        },
        {
          "name": "ForSimpleTypes",
          "description": "For simple types",
          "type": "VariableStyle",
          "isObsolete": false,
          "defaultValue": "UseVar"
        },
        {
          "name": "PreferExplicitDiscardDeclaration",
          "description": "Use 'var' keyword for discards",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "PreferSeparateDeconstructedVariablesDeclaration",
          "description": "Prefer separate declarations for deconstructed variables",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "UseRoslynLogicForEvidentTypes",
          "description": "Prefer Roslyn (Visual Studio) logic for type evidence",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        }
      ]
    }
  },
  {
    "description": "C# namespace import",
    "subtree": [
      "CodeStyle",
      "CSharpUsing"
    ],
    "settings": {
      "enumerations": {},
      "items": [
        {
          "name": "AddImportsToDeepestScope",
          "description": "Add 'using' directive to deepest scope",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "AllowAlias",
          "description": "Use using alias directive to resolve conflicts",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "CanUseGlobalAlias",
          "description": "Allow 'global::' prefix use",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "KeepNontrivialAlias",
          "description": "Do not remove non-trivial alias directives",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "PreferQualifiedReference",
          "description": "Prefer fully qualified references",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "QualifiedUsingAtNestedScope",
          "description": "Prefer fully qualified using name at nested scope",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SortUsings",
          "description": "Sort 'using' directives",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SortUsingsLowercaseFirst",
          "description": "When sorting 'using' lowercase characters always go first",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SortUsingsWithSystemFirst",
          "description": "Place 'System.*' and 'Windows.*' namespaces first when sorting 'using' directives",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        }
      ]
    }
  },
  {
    "description": "Syntax style in C#",
    "subtree": [
      "CodeStyle",
      "CodeFormatting",
      "CSharpCodeStyle"
    ],
    "settings": {
      "enumerations": {
        "AccessorOwnerBodyStyle": [
          {
            "value": "ExpressionBody",
            "description": "Expression body"
          },
          {
            "value": "AccessorsWithExpressionBody",
            "description": "Accessors with expression body"
          },
          {
            "value": "AccessorsWithBlockBody",
            "description": "Accessors with block body"
          }
        ],
        "ArgumentsStyle": [
          {
            "value": "Positional",
            "description": "Positional argument"
          },
          {
            "value": "Named",
            "description": "Named argument"
          }
        ],
        "AttributeStyle": [
          {
            "value": "Join",
            "description": "Join"
          },
          {
            "value": "Separate",
            "description": "Separate"
          }
        ],
        "BinaryOperationGroupType": [
          {
            "value": "None",
            "description": "None"
          },
          {
            "value": "Arithmetic",
            "description": "*  /  %  +  -  <<  >>  &  ^  |"
          },
          {
            "value": "Relational",
            "description": "<  >  <=  >=  ==  !="
          },
          {
            "value": "Conditional",
            "description": "&& || ??"
          }
        ],
        "BinaryOperationType": [
          {
            "value": "None",
            "description": "None"
          },
          {
            "value": "Multiplicative",
            "description": "*  /  %"
          },
          {
            "value": "Additive",
            "description": "+  -"
          },
          {
            "value": "Arithmetic",
            "description": "*  /  %  +  -"
          },
          {
            "value": "Shift",
            "description": "<<  >>"
          },
          {
            "value": "Relational",
            "description": "<  >  <=  >="
          },
          {
            "value": "Equality",
            "description": "==  !="
          },
          {
            "value": "BitwiseAnd",
            "description": "&"
          },
          {
            "value": "BitwiseExclusiveOr",
            "description": "^"
          },
          {
            "value": "BitwiseInclusiveOr",
            "description": "|"
          },
          {
            "value": "Bitwise",
            "description": "&  ^  |"
          },
          {
            "value": "ConditionalAnd",
            "description": "&&"
          },
          {
            "value": "ConditionalOr",
            "description": "||"
          },
          {
            "value": "Conditional",
            "description": "&&  ||"
          },
          {
            "value": "NullCoalescing",
            "description": "??"
          },
          {
            "value": "Lowest",
            "description": "Lowest"
          }
        ],
        "BracesCodeStyle": [
          {
            "value": "NotRequired",
            "description": "Do not enforce"
          },
          {
            "value": "Required",
            "description": "Enforce always"
          },
          {
            "value": "RequiredForMultiline",
            "description": "Enforce if body is multi-line"
          },
          {
            "value": "RequiredForMultilineStatement",
            "description": "Enforce if statement is multi-line"
          },
          {
            "value": "RequiredForComplex",
            "description": "Enforce if body is complex"
          }
        ],
        "BuiltInTypeStyle": [
          {
            "value": "UseKeyword",
            "description": "Keyword"
          },
          {
            "value": "UseClrName",
            "description": "CLR type name"
          },
          {
            "value": "Dynamic",
            "description": "Dynamic"
          }
        ],
        "DefaultModifierDefinition": [
          {
            "value": "Explicit",
            "description": "Explicit"
          },
          {
            "value": "Implicit",
            "description": "Implicit"
          }
        ],
        "FunctionBodyStyle": [
          {
            "value": "ExpressionBody",
            "description": "Expression body"
          },
          {
            "value": "BlockBody",
            "description": "Block body"
          }
        ],
        "IfElseBracesCodeStyle": [
          {
            "value": "NotRequired",
            "description": "Do not enforce"
          },
          {
            "value": "NotRequiredForBoth",
            "description": "Enforce if any part requires braces"
          },
          {
            "value": "Required",
            "description": "Enforce always"
          },
          {
            "value": "RequiredForMultiline",
            "description": "Enforce if body is multi-line"
          },
          {
            "value": "RequiredForMultilineStatement",
            "description": "Enforce if statement is multi-line"
          },
          {
            "value": "RequiredForComplex",
            "description": "Enforce if body is complex"
          }
        ],
        "ParenthesesRedundancyStyle": [
          {
            "value": "Remove",
            "description": "Always"
          },
          {
            "value": "RemoveIfNotClarifiesPrecedence",
            "description": "If not clarifies precedence"
          }
        ]
      },
      "items": [
        {
          "name": "ACCESSOR_OWNER_BODY",
          "description": "Properties, indexers and events",
          "type": "AccessorOwnerBodyStyle",
          "isObsolete": false,
          "defaultValue": "ExpressionBody"
        },
        {
          "name": "APPLY_ON_COMPLETION",
          "description": "Apply syntax style on code completion",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ARGUMENTS_ANONYMOUS_FUNCTION",
          "description": "Anonymous methods (delegates and lambdas)",
          "type": "ArgumentsStyle",
          "isObsolete": false,
          "defaultValue": "Positional"
        },
        {
          "name": "ARGUMENTS_LITERAL",
          "description": "Literal values",
          "type": "ArgumentsStyle",
          "isObsolete": false,
          "defaultValue": "Positional"
        },
        {
          "name": "ARGUMENTS_NAMED",
          "description": "Named expressions (variables, properties, methods, etc.)",
          "type": "ArgumentsStyle",
          "isObsolete": false,
          "defaultValue": "Positional"
        },
        {
          "name": "ARGUMENTS_OTHER",
          "description": "Other",
          "type": "ArgumentsStyle",
          "isObsolete": false,
          "defaultValue": "Positional"
        },
        {
          "name": "ARGUMENTS_SKIP_SINGLE",
          "description": "Skip single arguments",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ARGUMENTS_STRING_LITERAL",
          "description": "String literal values",
          "type": "ArgumentsStyle",
          "isObsolete": false,
          "defaultValue": "Positional"
        },
        {
          "name": "BRACES_FOR_DOWHILE",
          "description": "In \"do-while\" statement",
          "type": "BracesCodeStyle",
          "isObsolete": false,
          "defaultValue": "Required"
        },
        {
          "name": "BRACES_FOR_FIXED",
          "description": "In \"fixed\" statement",
          "type": "BracesCodeStyle",
          "isObsolete": false,
          "defaultValue": "Required"
        },
        {
          "name": "BRACES_FOR_FOR",
          "description": "In \"for\" statement",
          "type": "BracesCodeStyle",
          "isObsolete": false,
          "defaultValue": "NotRequired"
        },
        {
          "name": "BRACES_FOR_FOREACH",
          "description": "In \"foreach\" statement",
          "type": "BracesCodeStyle",
          "isObsolete": false,
          "defaultValue": "NotRequired"
        },
        {
          "name": "BRACES_FOR_IFELSE",
          "description": "In \"if\" statement",
          "type": "IfElseBracesCodeStyle",
          "isObsolete": false,
          "defaultValue": "NotRequiredForBoth"
        },
        {
          "name": "BRACES_FOR_LOCK",
          "description": "In \"lock\" statement",
          "type": "BracesCodeStyle",
          "isObsolete": false,
          "defaultValue": "Required"
        },
        {
          "name": "BRACES_FOR_USING",
          "description": "In \"using\" statement",
          "type": "BracesCodeStyle",
          "isObsolete": false,
          "defaultValue": "Required"
        },
        {
          "name": "BRACES_FOR_WHILE",
          "description": "In \"while\" statement",
          "type": "BracesCodeStyle",
          "isObsolete": false,
          "defaultValue": "NotRequired"
        },
        {
          "name": "BRACES_REDUNDANT",
          "description": "Remove redundant",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "BUILTIN_TYPE_REFERENCE_FOR_MEMBER_ACCESS_STYLE",
          "description": "In member access expressions, prefer",
          "type": "BuiltInTypeStyle",
          "isObsolete": false,
          "defaultValue": "UseKeyword"
        },
        {
          "name": "BUILTIN_TYPE_REFERENCE_STYLE",
          "description": "In locals, members and parameters, prefer",
          "type": "BuiltInTypeStyle",
          "isObsolete": false,
          "defaultValue": "UseKeyword"
        },
        {
          "name": "CONSTRUCTOR_OR_DESTRUCTOR_BODY",
          "description": "Constructors and destructors",
          "type": "FunctionBodyStyle",
          "isObsolete": false,
          "defaultValue": "BlockBody"
        },
        {
          "name": "DEFAULT_INTERNAL_MODIFIER",
          "description": "Prefer explicit/implicit internal modifier for types",
          "type": "DefaultModifierDefinition",
          "isObsolete": false,
          "defaultValue": "Explicit"
        },
        {
          "name": "DEFAULT_PRIVATE_MODIFIER",
          "description": "Prefer explicit/implicit private modifier for type members",
          "type": "DefaultModifierDefinition",
          "isObsolete": false,
          "defaultValue": "Explicit"
        },
        {
          "name": "FORCE_ATTRIBUTE_STYLE",
          "description": "Join or separate attributes in section",
          "type": "AttributeStyle",
          "isObsolete": false,
          "defaultValue": "Separate"
        },
        {
          "name": "LOCAL_FUNCTION_BODY",
          "description": "Local functions",
          "type": "FunctionBodyStyle",
          "isObsolete": false,
          "defaultValue": "BlockBody"
        },
        {
          "name": "METHOD_OR_OPERATOR_BODY",
          "description": "Methods and operators",
          "type": "FunctionBodyStyle",
          "isObsolete": false,
          "defaultValue": "BlockBody"
        },
        {
          "name": "MODIFIERS_ORDER",
          "description": "Modifiers order",
          "type": "String",
          "isObsolete": false,
          "defaultValue": "public private protected internal new abstract virtual sealed override static readonly extern unsafe volatile async"
        },
        {
          "name": "PARENTHESES_GROUP_NON_OBVIOUS_OPERATIONS",
          "description": "When the operations from the following groups are nested",
          "type": "BinaryOperationGroupType",
          "isObsolete": false,
          "defaultValue": "None"
        },
        {
          "name": "PARENTHESES_NON_OBVIOUS_OPERATIONS",
          "description": "Around operands of the following operations",
          "type": "BinaryOperationType",
          "isObsolete": false,
          "defaultValue": null
        },
        {
          "name": "PARENTHESES_REDUNDANCY_STYLE",
          "description": "Remove redundant parentheses",
          "type": "ParenthesesRedundancyStyle",
          "isObsolete": false,
          "defaultValue": "RemoveIfNotClarifiesPrecedence"
        },
        {
          "name": "TRAILING_COMMA_IN_MULTILINE_LISTS",
          "description": "Before a new line in multiline lists",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "TRAILING_COMMA_IN_SINGLELINE_LISTS",
          "description": "When the last element is not followed by a new line",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "USE_HEURISTICS_FOR_BODY_STYLE",
          "description": "Apply style heuristics",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        }
      ]
    }
  },
  {
    "description": "Static member qualifier",
    "subtree": [
      "CodeStyle",
      "CodeFormatting",
      "CSharpCodeStyle",
      "StaticQualifier"
    ],
    "settings": {
      "enumerations": {
        "QualifiedMember": [
          {
            "value": "None",
            "description": "None"
          },
          {
            "value": "Field",
            "description": "Field"
          },
          {
            "value": "Property",
            "description": "Property"
          },
          {
            "value": "Event",
            "description": "Event"
          },
          {
            "value": "Method",
            "description": "Method"
          },
          {
            "value": "All",
            "description": "All"
          }
        ],
        "StaticMemberQualifierStyle": [
          {
            "value": "DoNotChange",
            "description": "DoNotChange"
          },
          {
            "value": "None",
            "description": "None"
          },
          {
            "value": "CurrentType",
            "description": "Current type"
          },
          {
            "value": "DeclaredType",
            "description": "Declared-in type"
          },
          {
            "value": "All",
            "description": "All"
          }
        ]
      },
      "items": [
        {
          "name": "STATIC_MEMBERS_QUALIFY_MEMBERS",
          "description": "Members to qualify",
          "type": "QualifiedMember",
          "isObsolete": false,
          "defaultValue": "None"
        },
        {
          "name": "STATIC_MEMBERS_QUALIFY_WITH",
          "description": "Qualify with the name of",
          "type": "StaticMemberQualifierStyle",
          "isObsolete": false,
          "defaultValue": "DeclaredType"
        }
      ]
    }
  },
  {
    "description": "\"this.\" qualifier",
    "subtree": [
      "CodeStyle",
      "CodeFormatting",
      "CSharpCodeStyle",
      "ThisQualifier"
    ],
    "settings": {
      "enumerations": {
        "MemberDeclaredIn": [
          {
            "value": "ThisClass",
            "description": "same class"
          },
          {
            "value": "BaseClass",
            "description": "base class"
          }
        ],
        "QualifiedMember": [
          {
            "value": "None",
            "description": "None"
          },
          {
            "value": "Field",
            "description": "Field"
          },
          {
            "value": "Property",
            "description": "Property"
          },
          {
            "value": "Event",
            "description": "Event"
          },
          {
            "value": "Method",
            "description": "Method"
          },
          {
            "value": "All",
            "description": "All"
          }
        ]
      },
      "items": [
        {
          "name": "INSTANCE_MEMBERS_QUALIFY_DECLARED_IN",
          "description": "Qualify members declared in",
          "type": "MemberDeclaredIn",
          "isObsolete": false,
          "defaultValue": null
        },
        {
          "name": "INSTANCE_MEMBERS_QUALIFY_MEMBERS",
          "description": "Use \"this.\" qualifier for",
          "type": "QualifiedMember",
          "isObsolete": false,
          "defaultValue": "None"
        }
      ]
    }
  },
  {
    "description": "Code formatting in C#",
    "subtree": [
      "CodeStyle",
      "CodeFormatting",
      "CSharpFormat"
    ],
    "settings": {
      "enumerations": {
        "AlignmentTabFillStyle": [
          {
            "value": "USE_SPACES",
            "description": "Use spaces (looks aligned on any tab size)"
          },
          {
            "value": "USE_TABS_ONLY",
            "description": "Only use tabs (inaccurate)"
          },
          {
            "value": "OPTIMAL_FILL",
            "description": "Mix tabs and spaces for optimal fill"
          }
        ],
        "BraceFormatStyle": [
          {
            "value": "END_OF_LINE",
            "description": "At end of line (K&R style)"
          },
          {
            "value": "END_OF_LINE_NO_SPACE",
            "description": "At end of line (no space)"
          },
          {
            "value": "NEXT_LINE",
            "description": "At next line (BSD style)"
          },
          {
            "value": "NEXT_LINE_SHIFTED",
            "description": "At next line indented (Whitesmiths style)"
          },
          {
            "value": "NEXT_LINE_SHIFTED_2",
            "description": "At next line indented 2 (GNU style)"
          }
        ],
        "EmptyBlockStyle": [
          {
            "value": "MULTILINE",
            "description": "On different lines"
          },
          {
            "value": "TOGETHER",
            "description": "Place braces together"
          },
          {
            "value": "TOGETHER_SAME_LINE",
            "description": "Together on the same line"
          }
        ],
        "ExtraSpaces": [
          {
            "value": "REMOVE_ALL",
            "description": "Remove all extra spaces"
          },
          {
            "value": "LEAVE_TABS",
            "description": "Leave extra tabs"
          },
          {
            "value": "LEAVE_MULTIPLE",
            "description": "Leave multiple extra spaces"
          },
          {
            "value": "LEAVE_ALL",
            "description": "Leave all extra spaces and tabs"
          }
        ],
        "ForceBraceStyle": [
          {
            "value": "DO_NOT_CHANGE",
            "description": "Do not change"
          },
          {
            "value": "ALWAYS_REMOVE",
            "description": "Remove braces"
          },
          {
            "value": "ALWAYS_ADD",
            "description": "Add braces"
          },
          {
            "value": "ONLY_FOR_MULTILINE",
            "description": "Use braces for multiline"
          }
        ],
        "IndentStyle": [
          {
            "value": "Tab",
            "description": "Tab"
          },
          {
            "value": "Space",
            "description": "Spaces"
          }
        ],
        "NestedTernaryExpressionStyle": [
          {
            "value": "SIMPLE_WRAP",
            "description": "Simple wrap/Do not change"
          },
          {
            "value": "AUTODETECT",
            "description": "Chop in existing style"
          },
          {
            "value": "COMPACT",
            "description": "Chop in compact style"
          },
          {
            "value": "EXPANDED",
            "description": "Chop in expanded style"
          }
        ],
        "ParsFormatStyle": [
          {
            "value": "INSIDE",
            "description": "Inside parenthesis (BSD/K&R style)"
          },
          {
            "value": "OUTSIDE",
            "description": "Parenthesis and inside equally (Whitesmiths style)"
          },
          {
            "value": "OUTSIDE_AND_INSIDE",
            "description": "Parenthesis 1x, inside 2x (GNU style)"
          },
          {
            "value": "NONE",
            "description": "No indent"
          }
        ],
        "PlaceOnSameLineAsOwner": [
          {
            "value": "NEVER",
            "description": "Never"
          },
          {
            "value": "IF_OWNER_IS_SINGLE_LINE",
            "description": "If owner is singleline"
          },
          {
            "value": "ALWAYS",
            "description": "Always"
          }
        ],
        "SimpleEmbeddedStatementStyle": [
          {
            "value": "DO_NOT_CHANGE",
            "description": "Do not change"
          },
          {
            "value": "ON_SINGLE_LINE",
            "description": "Force put on single line"
          },
          {
            "value": "LINE_BREAK",
            "description": "Force line breaks"
          }
        ],
        "SpecialIndent": [
          {
            "value": "NO_INDENT",
            "description": "No indent"
          },
          {
            "value": "USUAL_INDENT",
            "description": "Indent as usual"
          },
          {
            "value": "OUTDENT",
            "description": "Outdent"
          },
          {
            "value": "DO_NOT_CHANGE",
            "description": "Do not change"
          }
        ],
        "ThisQualifierStyle2": [
          {
            "value": "ALWAYS_USE",
            "description": "Use always"
          },
          {
            "value": "USE_FOR_FIELD",
            "description": "For fields"
          },
          {
            "value": "USE_FOR_THIS_CLASS",
            "description": "For this class members"
          },
          {
            "value": "USE_FOR_VARIABLES_IN_THIS_CLASS",
            "description": "For fields in this class"
          },
          {
            "value": "DO_NOT_USE",
            "description": "Do not use"
          }
        ],
        "WrapStyle": [
          {
            "value": "WRAP_IF_LONG",
            "description": "Simple wrap"
          },
          {
            "value": "CHOP_IF_LONG",
            "description": "Chop if long or multiline"
          },
          {
            "value": "CHOP_ALWAYS",
            "description": "Chop always"
          }
        ],
        "WrapStyleExpanded": [
          {
            "value": "WRAP_IF_LONG",
            "description": "Simple wrap"
          },
          {
            "value": "CHOP_IF_LONG",
            "description": "Chop if long or multiline"
          },
          {
            "value": "NO_WRAP",
            "description": "Do not wrap even if long"
          }
        ],
        "WrapStyleSimple": [
          {
            "value": "WRAP_IF_LONG",
            "description": "Simple wrap"
          },
          {
            "value": "CHOP_IF_LONG",
            "description": "Chop if long or multiline"
          }
        ]
      },
      "items": [
        {
          "name": "ACCESSOR_DECLARATION_BRACES",
          "description": "Accessor declaration",
          "type": "BraceFormatStyle",
          "isObsolete": false,
          "defaultValue": "NEXT_LINE"
        },
        {
          "name": "ACCESSOR_OWNER_DECLARATION_BRACES",
          "description": "Property declaration",
          "type": "BraceFormatStyle",
          "isObsolete": false,
          "defaultValue": "NEXT_LINE"
        },
        {
          "name": "ALIGN_FIRST_ARG_BY_PAREN",
          "description": "Call arguments by '('",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ALIGN_LINQ_QUERY",
          "description": "LINQ query",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ALIGN_MULTILINE_ARGUMENT",
          "description": "Call arguments",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ALIGN_MULTILINE_ARRAY_AND_OBJECT_INITIALIZER",
          "description": "Array, object and collection initializer",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ALIGN_MULTILINE_BINARY_EXPRESSIONS_CHAIN",
          "description": "Chained binary expressions",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "ALIGN_MULTILINE_CALLS_CHAIN",
          "description": "Chained method calls",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ALIGN_MULTILINE_EXPRESSION",
          "description": "Other expressions",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ALIGN_MULTILINE_EXTENDS_LIST",
          "description": "List of base classes and interfaces",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ALIGN_MULTILINE_FOR_STMT",
          "description": "\"for\" statement header",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ALIGN_MULTILINE_PARAMETER",
          "description": "Method parameters",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ALIGN_MULTILINE_SWITCH_EXPRESSION",
          "description": "Switch expressions",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ALIGN_MULTIPLE_DECLARATION",
          "description": "Multiple declarations",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ALIGN_MULTLINE_TYPE_PARAMETER_CONSTRAINS",
          "description": "Type parameter constraints",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ALIGN_MULTLINE_TYPE_PARAMETER_LIST",
          "description": "Type parameters list",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ALIGN_TUPLE_COMPONENTS",
          "description": "Tuple components",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ALIGNMENT_TAB_FILL_STYLE",
          "description": "How to align when tabs are used for indents",
          "type": "AlignmentTabFillStyle",
          "isObsolete": false,
          "defaultValue": "USE_SPACES"
        },
        {
          "name": "ALLOW_COMMENT_AFTER_LBRACE",
          "description": "Allow comment after '{'",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ALLOW_FAR_ALIGNMENT",
          "description": "Align even if the resulting indentation is too large",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "ANONYMOUS_METHOD_DECLARATION_BRACES",
          "description": "Lambda and delegate (anonymous method declaration)",
          "type": "BraceFormatStyle",
          "isObsolete": false,
          "defaultValue": "NEXT_LINE"
        },
        {
          "name": "BLANK_LINES_AFTER_BLOCK_STATEMENTS",
          "description": "After statements with child blocks",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 1
        },
        {
          "name": "BLANK_LINES_AFTER_CASE",
          "description": "After \"case\" in switch statement",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "BLANK_LINES_AFTER_CONTROL_TRANSFER_STATEMENTS",
          "description": "After statements with control transfer",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "BLANK_LINES_AFTER_MULTILINE_STATEMENTS",
          "description": "After multiline statements",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "BLANK_LINES_AFTER_START_COMMENT",
          "description": "After file header comment",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 1
        },
        {
          "name": "BLANK_LINES_AFTER_USING_LIST",
          "description": "After \"using\" list",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 1
        },
        {
          "name": "BLANK_LINES_AROUND_AUTO_PROPERTY",
          "description": "Around auto/abstract property/event",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 1
        },
        {
          "name": "BLANK_LINES_AROUND_BLOCK_CASE_SECTION",
          "description": "Around \"case\" section with a block in switch statement",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "BLANK_LINES_AROUND_FIELD",
          "description": "Around field",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 1
        },
        {
          "name": "BLANK_LINES_AROUND_INVOCABLE",
          "description": "Around method",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 1
        },
        {
          "name": "BLANK_LINES_AROUND_LOCAL_METHOD",
          "description": "Around local function",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 1
        },
        {
          "name": "BLANK_LINES_AROUND_MULTILINE_CASE_SECTION",
          "description": "Around multiline \"case\" section in switch statement",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "BLANK_LINES_AROUND_NAMESPACE",
          "description": "Around namespace",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 1
        },
        {
          "name": "BLANK_LINES_AROUND_PROPERTY",
          "description": "Around property/event",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 1
        },
        {
          "name": "BLANK_LINES_AROUND_REGION",
          "description": "Around region",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 1
        },
        {
          "name": "BLANK_LINES_AROUND_SINGLE_LINE_AUTO_PROPERTY",
          "description": "Around single line auto/abstract property/event",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "BLANK_LINES_AROUND_SINGLE_LINE_FIELD",
          "description": "Around single line field",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "BLANK_LINES_AROUND_SINGLE_LINE_INVOCABLE",
          "description": "Around single line method",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "BLANK_LINES_AROUND_SINGLE_LINE_LOCAL_METHOD",
          "description": "Around single line local function",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "BLANK_LINES_AROUND_SINGLE_LINE_PROPERTY",
          "description": "Around single line property/event",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "BLANK_LINES_AROUND_SINGLE_LINE_TYPE",
          "description": "Around single-line type",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 1
        },
        {
          "name": "BLANK_LINES_AROUND_TYPE",
          "description": "Around type",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 1
        },
        {
          "name": "BLANK_LINES_BEFORE_BLOCK_STATEMENTS",
          "description": "Before statements with child blocks",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "BLANK_LINES_BEFORE_CASE",
          "description": "Before \"case\" in switch statement",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "BLANK_LINES_BEFORE_CONTROL_TRANSFER_STATEMENTS",
          "description": "Before statements with control transfer",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "BLANK_LINES_BEFORE_MULTILINE_STATEMENTS",
          "description": "Before multiline statements",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "BLANK_LINES_BEFORE_SINGLE_LINE_COMMENT",
          "description": "Before single-line comment",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "BLANK_LINES_BETWEEN_USING_GROUPS",
          "description": "Between different \"using\" groups",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "BLANK_LINES_INSIDE_NAMESPACE",
          "description": "Inside namespace",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "BLANK_LINES_INSIDE_REGION",
          "description": "Inside region",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 1
        },
        {
          "name": "BLANK_LINES_INSIDE_TYPE",
          "description": "Inside type",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 0
        },
        {
          "name": "CASE_BLOCK_BRACES",
          "description": "Block under \"case\" label",
          "type": "BraceFormatStyle",
          "isObsolete": false,
          "defaultValue": "NEXT_LINE"
        },
        {
          "name": "CONTINUOUS_INDENT_MULTIPLIER",
          "description": "Continuous line indent multiplier",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 1
        },
        {
          "name": "DISABLE_BLANK_LINE_CHANGES",
          "description": "Disable blank line changes",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "DISABLE_FORMATTER",
          "description": "Disable formatter in general",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "DISABLE_INDENTER",
          "description": "Disable indenter",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "DISABLE_INT_ALIGN",
          "description": "Disable align in columns",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "DISABLE_LINE_BREAK_CHANGES",
          "description": "Disable line break changes",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "DISABLE_LINE_BREAK_REMOVAL",
          "description": "Disable line break removal",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "DISABLE_SPACE_CHANGES",
          "description": "Disable space changes",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "DontRemoveExtraBlankLines",
          "description": "DontRemoveExtraBlankLines",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "EMPTY_BLOCK_STYLE",
          "description": "Empty braces formatting",
          "type": "EmptyBlockStyle",
          "isObsolete": false,
          "defaultValue": "MULTILINE"
        },
        {
          "name": "EXTRA_SPACES",
          "description": "Extra spaces inside",
          "type": "ExtraSpaces",
          "isObsolete": false,
          "defaultValue": "REMOVE_ALL"
        },
        {
          "name": "FORCE_CHOP_COMPOUND_DO_EXPRESSION",
          "description": "Force chop compound condition in \"do\" statement",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "FORCE_CHOP_COMPOUND_IF_EXPRESSION",
          "description": "Force chop compound condition in \"if\" statement",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "FORCE_CHOP_COMPOUND_WHILE_EXPRESSION",
          "description": "Force chop compound condition in \"while\" statement",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "FORCE_FIXED_BRACES_STYLE",
          "description": "Braces in \"fixed\" statement",
          "type": "ForceBraceStyle",
          "isObsolete": true,
          "defaultValue": "DO_NOT_CHANGE"
        },
        {
          "name": "FORCE_FOR_BRACES_STYLE",
          "description": "Braces in \"for\" statement",
          "type": "ForceBraceStyle",
          "isObsolete": true,
          "defaultValue": "DO_NOT_CHANGE"
        },
        {
          "name": "FORCE_FOREACH_BRACES_STYLE",
          "description": "Braces in \"foreach\" statement",
          "type": "ForceBraceStyle",
          "isObsolete": true,
          "defaultValue": "DO_NOT_CHANGE"
        },
        {
          "name": "FORCE_IFELSE_BRACES_STYLE",
          "description": "Braces in \"if-else\" statement",
          "type": "ForceBraceStyle",
          "isObsolete": true,
          "defaultValue": "DO_NOT_CHANGE"
        },
        {
          "name": "FORCE_USING_BRACES_STYLE",
          "description": "Braces in \"using\" statement",
          "type": "ForceBraceStyle",
          "isObsolete": true,
          "defaultValue": "DO_NOT_CHANGE"
        },
        {
          "name": "FORCE_WHILE_BRACES_STYLE",
          "description": "Braces in \"while\" statement",
          "type": "ForceBraceStyle",
          "isObsolete": true,
          "defaultValue": "DO_NOT_CHANGE"
        },
        {
          "name": "FORMAT_LEADING_SPACES_DECL",
          "description": "Format leading file spaces via declarative formatter",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "GeneratorMode",
          "description": "GeneratorMode",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "IgnoreForceSingleLineSetting",
          "description": "Don't force single lines",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INCLUDE_PREFIX_COMMENT_IN_INDENT",
          "description": "Include prefix comments in indents",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INDENT_ANONYMOUS_METHOD_BLOCK",
          "description": "Anonymous method body",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INDENT_CASE_FROM_SWITCH",
          "description": "Indent \"case\" from \"switch\"",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "INDENT_INSIDE_NAMESPACE",
          "description": "Indent inside namespace declaration",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "INDENT_INVOCATION_PARS",
          "description": "Indent method calls' parenthesis",
          "type": "ParsFormatStyle",
          "isObsolete": false,
          "defaultValue": "INSIDE"
        },
        {
          "name": "INDENT_METHOD_DECL_PARS",
          "description": "Indent method declarations' parenthesis",
          "type": "ParsFormatStyle",
          "isObsolete": false,
          "defaultValue": "INSIDE"
        },
        {
          "name": "INDENT_NESTED_FIXED_STMT",
          "description": "Indent nested \"fixed\" statements",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INDENT_NESTED_FOR_STMT",
          "description": "Indent nested \"for\" statements",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INDENT_NESTED_FOREACH_STMT",
          "description": "Indent nested \"foreach\" statements",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INDENT_NESTED_LOCK_STMT",
          "description": "Indent nested \"lock\" statements",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INDENT_NESTED_USINGS_STMT",
          "description": "Indent nested \"using\" statements",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INDENT_NESTED_WHILE_STMT",
          "description": "Indent nested \"while\" statements",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INDENT_PARS",
          "description": "Indent other parenthesis and brackets",
          "type": "ParsFormatStyle",
          "isObsolete": false,
          "defaultValue": "INSIDE"
        },
        {
          "name": "INDENT_PREPROCESSOR_IF",
          "description": "Indent #if, #else, #elif, #endif",
          "type": "SpecialIndent",
          "isObsolete": false,
          "defaultValue": "NO_INDENT"
        },
        {
          "name": "INDENT_PREPROCESSOR_OTHER",
          "description": "Indent other preprocessor directives",
          "type": "SpecialIndent",
          "isObsolete": false,
          "defaultValue": "NO_INDENT"
        },
        {
          "name": "INDENT_PREPROCESSOR_REGION",
          "description": "Indent #region, #endregion",
          "type": "SpecialIndent",
          "isObsolete": false,
          "defaultValue": "USUAL_INDENT"
        },
        {
          "name": "INDENT_SIZE",
          "description": "Indent size",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 4
        },
        {
          "name": "INDENT_STATEMENT_PARS",
          "description": "Indent statement (if, while, for, etc) parenthesis",
          "type": "ParsFormatStyle",
          "isObsolete": false,
          "defaultValue": "INSIDE"
        },
        {
          "name": "INDENT_STYLE",
          "description": "Indent style",
          "type": "IndentStyle",
          "isObsolete": false,
          "defaultValue": "Space"
        },
        {
          "name": "INDENT_TYPE_CONSTRAINTS",
          "description": "Indent type constraints",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "INDENT_TYPEARG_ANGLES",
          "description": "Indent type argument's angles",
          "type": "ParsFormatStyle",
          "isObsolete": false,
          "defaultValue": "INSIDE"
        },
        {
          "name": "INDENT_TYPEPARAM_ANGLES",
          "description": "Indent type parameter's angles",
          "type": "ParsFormatStyle",
          "isObsolete": false,
          "defaultValue": "INSIDE"
        },
        {
          "name": "INITIALIZER_BRACES",
          "description": "Expressions (initializers, switch expressions)",
          "type": "BraceFormatStyle",
          "isObsolete": false,
          "defaultValue": "NEXT_LINE"
        },
        {
          "name": "INT_ALIGN_ASSIGNMENTS",
          "description": "Other assignments and initializers",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INT_ALIGN_BINARY_EXPRESSIONS",
          "description": "Binary expressions",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INT_ALIGN_COMMENTS",
          "description": "End comments",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INT_ALIGN_FIELDS",
          "description": "Fields and constants",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INT_ALIGN_FIX_IN_ADJACENT",
          "description": "Fix column alignment in adjacent lines",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "INT_ALIGN_INVOCATIONS",
          "description": "Invocations of the same method",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INT_ALIGN_METHODS",
          "description": "Simple methods, operators, delegates",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INT_ALIGN_NESTED_TERNARY",
          "description": "Nested ternary operators",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INT_ALIGN_PARAMETERS",
          "description": "Multiline method signature",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INT_ALIGN_PROPERTIES",
          "description": "Properties and events",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INT_ALIGN_SWITCH_EXPRESSIONS",
          "description": "Switch expressions",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INT_ALIGN_SWITCH_SECTIONS",
          "description": "Simple switch sections",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INT_ALIGN_VARIABLES",
          "description": "Variables and local constants",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "INVOCABLE_DECLARATION_BRACES",
          "description": "Method declaration",
          "type": "BraceFormatStyle",
          "isObsolete": false,
          "defaultValue": "NEXT_LINE"
        },
        {
          "name": "KEEP_BLANK_LINES_IN_CODE",
          "description": "Keep max blank lines in code",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 2
        },
        {
          "name": "KEEP_BLANK_LINES_IN_DECLARATIONS",
          "description": "Keep max blank lines in declarations",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 2
        },
        {
          "name": "KEEP_EXISTING_ATTRIBUTE_ARRANGEMENT",
          "description": "Keep existing arrangement of attributes",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "KEEP_EXISTING_ATTRIBUTE_PLACEMENT",
          "description": "Keep existing attribute placement",
          "type": "Boolean",
          "isObsolete": true,
          "defaultValue": false
        },
        {
          "name": "KEEP_EXISTING_DECLARATION_BLOCK_ARRANGEMENT",
          "description": "Keep existing arrangement of declaration blocks",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "KEEP_EXISTING_DECLARATION_PARENS_ARRANGEMENT",
          "description": "Keep existing arrangement of parenthesis in declaration",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "KEEP_EXISTING_EMBEDDED_ARRANGEMENT",
          "description": "Keep existing arrangement of embedded statements",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "KEEP_EXISTING_EMBEDDED_BLOCK_ARRANGEMENT",
          "description": "Keep existing arrangement of embedded blocks",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "KEEP_EXISTING_ENUM_ARRANGEMENT",
          "description": "Keep existing arrangement of enumeration",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "KEEP_EXISTING_EXPR_MEMBER_ARRANGEMENT",
          "description": "Keep existing arrangement of expression bodied members",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "KEEP_EXISTING_INITIALIZER_ARRANGEMENT",
          "description": "Keep existing arrangement of initializers",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "KEEP_EXISTING_INVOCATION_PARENS_ARRANGEMENT",
          "description": "Keep existing arrangement of parenthesis in invocation",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "KEEP_EXISTING_SWITCH_EXPRESSION_ARRANGEMENT",
          "description": "Keep existing arrangement of switch expressions",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "KEEP_USER_LINEBREAKS",
          "description": "Keep existing line breaks",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "KEEP_USER_WRAPPING",
          "description": "Keep user wrapping",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "LINE_FEED_AT_FILE_END",
          "description": "Line feed at end of file",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "MAX_ARRAY_INITIALIZER_ELEMENTS_ON_LINE",
          "description": "Max array initializer elements on a single line",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 10000
        },
        {
          "name": "MAX_ATTRIBUTE_LENGTH_FOR_SAME_LINE",
          "description": "Place attribute section list on separate line if it is longer than",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 38
        },
        {
          "name": "MAX_ATTRIBUTES_LENGTH_FOR_SAME_LINE",
          "description": "Place attribute on separate line if it is longer than",
          "type": "Int32",
          "isObsolete": true,
          "defaultValue": 38
        },
        {
          "name": "MAX_ENUM_MEMBERS_ON_LINE",
          "description": "Max enumeration members on a single line",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 3
        },
        {
          "name": "MAX_FORMAL_PARAMETERS_ON_LINE",
          "description": "Max formal parameters on a single line",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 10000
        },
        {
          "name": "MAX_INITIALIZER_ELEMENTS_ON_LINE",
          "description": "Max object and collection initializer elements on a single line",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 4
        },
        {
          "name": "MAX_INVOCATION_ARGUMENTS_ON_LINE",
          "description": "Max invocation arguments on a single line",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 10000
        },
        {
          "name": "NESTED_TERNARY_STYLE",
          "description": "Nested ternary expression style",
          "type": "NestedTernaryExpressionStyle",
          "isObsolete": false,
          "defaultValue": "AUTODETECT"
        },
        {
          "name": "OLD_ENGINE",
          "description": "Revert to old formatting engine",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "OTHER_BRACES",
          "description": "Other",
          "type": "BraceFormatStyle",
          "isObsolete": false,
          "defaultValue": "NEXT_LINE"
        },
        {
          "name": "OUTDENT_BINARY_OPS",
          "description": "Outdent binary operators",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "OUTDENT_COMMAS",
          "description": "Outdent commas",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "OUTDENT_DOTS",
          "description": "Outdent dots in chained method calls",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "OUTDENT_TERNARY_OPS",
          "description": "Outdent ternary expressions",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "PLACE_ABSTRACT_ACCESSORHOLDER_ON_SINGLE_LINE",
          "description": "Place abstract/auto property/indexer/event declaration on single line",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "PLACE_ACCESSOR_ATTRIBUTE_ON_SAME_LINE_EX",
          "description": "Place accessor attribute on the same line",
          "type": "PlaceOnSameLineAsOwner",
          "isObsolete": false,
          "defaultValue": "IF_OWNER_IS_SINGLE_LINE"
        },
        {
          "name": "PLACE_ACCESSOR_WITH_ATTRS_HOLDER_ON_SINGLE_LINE",
          "description": "Place it on single line even when it has attributes on accessors",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "PLACE_ACCESSORHOLDER_ATTRIBUTE_ON_SAME_LINE",
          "description": "Place property/indexer/event attribute on the same line",
          "type": "Boolean",
          "isObsolete": true,
          "defaultValue": false
        },
        {
          "name": "PLACE_ACCESSORHOLDER_ATTRIBUTE_ON_SAME_LINE_EX",
          "description": "Place property/indexer/event attribute on the same line",
          "type": "PlaceOnSameLineAsOwner",
          "isObsolete": false,
          "defaultValue": "IF_OWNER_IS_SINGLE_LINE"
        },
        {
          "name": "PLACE_CATCH_ON_NEW_LINE",
          "description": "Place \"catch\" on new line",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "PLACE_COMMENTS_AT_FIRST_COLUMN",
          "description": "Place comments at first column when commenting out code",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "PLACE_COMPLEX_ACCESSOR_ATTRIBUTE_ON_SAME_LINE",
          "description": "Place multiline accessor attribute on the same line",
          "type": "Boolean",
          "isObsolete": true,
          "defaultValue": false
        },
        {
          "name": "PLACE_CONSTRUCTOR_INITIALIZER_ON_SAME_LINE",
          "description": "Allow constructor initializer on the same line",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "PLACE_ELSE_ON_NEW_LINE",
          "description": "Place \"else\" on new line",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "PLACE_EXPR_ACCESSOR_ON_SINGLE_LINE",
          "description": "Place property accessor expression body on the same line",
          "type": "PlaceOnSameLineAsOwner",
          "isObsolete": false,
          "defaultValue": "IF_OWNER_IS_SINGLE_LINE"
        },
        {
          "name": "PLACE_EXPR_METHOD_ON_SINGLE_LINE",
          "description": "Place method expression body on the same line",
          "type": "PlaceOnSameLineAsOwner",
          "isObsolete": false,
          "defaultValue": "IF_OWNER_IS_SINGLE_LINE"
        },
        {
          "name": "PLACE_EXPR_PROPERTY_ON_SINGLE_LINE",
          "description": "Place property expression body on the same line",
          "type": "PlaceOnSameLineAsOwner",
          "isObsolete": false,
          "defaultValue": "IF_OWNER_IS_SINGLE_LINE"
        },
        {
          "name": "PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE",
          "description": "Place field attribute on the same line",
          "type": "Boolean",
          "isObsolete": true,
          "defaultValue": true
        },
        {
          "name": "PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE_EX",
          "description": "Place field attribute on the same line",
          "type": "PlaceOnSameLineAsOwner",
          "isObsolete": false,
          "defaultValue": "ALWAYS"
        },
        {
          "name": "PLACE_FINALLY_ON_NEW_LINE",
          "description": "Place \"finally\" on new line",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "PLACE_LINQ_INTO_ON_NEW_LINE",
          "description": "Place \"into\" on new line in LINQ expressions",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "PLACE_METHOD_ATTRIBUTE_ON_SAME_LINE",
          "description": "Place method attribute on the same line",
          "type": "Boolean",
          "isObsolete": true,
          "defaultValue": false
        },
        {
          "name": "PLACE_METHOD_ATTRIBUTE_ON_SAME_LINE_EX",
          "description": "Place method attribute on the same line",
          "type": "PlaceOnSameLineAsOwner",
          "isObsolete": false,
          "defaultValue": "NEVER"
        },
        {
          "name": "PLACE_SIMPLE_ACCESSOR_ATTRIBUTE_ON_SAME_LINE",
          "description": "Place singleline accessor attribute on the same line",
          "type": "Boolean",
          "isObsolete": true,
          "defaultValue": true
        },
        {
          "name": "PLACE_SIMPLE_ACCESSOR_ON_SINGLE_LINE",
          "description": "Place simple accessor on single line",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "PLACE_SIMPLE_ACCESSORHOLDER_ON_SINGLE_LINE",
          "description": "Place simple property/indexer/event declaration on single line",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "PLACE_SIMPLE_ANONYMOUSMETHOD_ON_SINGLE_LINE",
          "description": "Place simple anonymous method on single line",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "PLACE_SIMPLE_CASE_STATEMENT_ON_SAME_LINE",
          "description": "Place simple \"case\" statement on the same line",
          "type": "PlaceOnSameLineAsOwner",
          "isObsolete": false,
          "defaultValue": "NEVER"
        },
        {
          "name": "PLACE_SIMPLE_EMBEDDED_BLOCK_ON_SAME_LINE",
          "description": "Place a block with a single simple statement on the same line",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "PLACE_SIMPLE_EMBEDDED_STATEMENT_ON_SAME_LINE",
          "description": "Place simple embedded statement on the same line",
          "type": "PlaceOnSameLineAsOwner",
          "isObsolete": false,
          "defaultValue": "IF_OWNER_IS_SINGLE_LINE"
        },
        {
          "name": "PLACE_SIMPLE_ENUM_ON_SINGLE_LINE",
          "description": "Place simple enumeration on single line",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "PLACE_SIMPLE_INITIALIZER_ON_SINGLE_LINE",
          "description": "Place simple array, object and collection on single line",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "PLACE_SIMPLE_METHOD_ON_SINGLE_LINE",
          "description": "Place simple method on single line",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "PLACE_SIMPLE_SWITCH_EXPRESSION_ON_SINGLE_LINE",
          "description": "Place simple switch expression on single line",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "PLACE_SINGLELINE_METHOD_ATTRIBUTE_ON_SAME_LINE",
          "description": "Place singleline method attribute on the same line",
          "type": "Boolean",
          "isObsolete": true,
          "defaultValue": false
        },
        {
          "name": "PLACE_TYPE_ATTRIBUTE_ON_SAME_LINE",
          "description": "Place type attribute on the same line",
          "type": "Boolean",
          "isObsolete": true,
          "defaultValue": false
        },
        {
          "name": "PLACE_TYPE_ATTRIBUTE_ON_SAME_LINE_EX",
          "description": "Place type attribute on the same line",
          "type": "PlaceOnSameLineAsOwner",
          "isObsolete": false,
          "defaultValue": "NEVER"
        },
        {
          "name": "PLACE_TYPE_CONSTRAINTS_ON_SAME_LINE",
          "description": "Allow type constraints on the same line",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "PLACE_WHILE_ON_NEW_LINE",
          "description": "Place \"while\" on new line",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "REDUNDANT_THIS_QUALIFIER_STYLE",
          "description": "Use \"this.\" qualifier for instance member",
          "type": "ThisQualifierStyle2",
          "isObsolete": true,
          "defaultValue": "DO_NOT_USE"
        },
        {
          "name": "REMOVE_BLANK_LINES_NEAR_BRACES_IN_CODE",
          "description": "Remove blank lines after \"{\" and before \"}\" in code",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "REMOVE_BLANK_LINES_NEAR_BRACES_IN_DECLARATIONS",
          "description": "Remove blank lines after \"{\" and before \"}\" in declarations",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SIMPLE_CASE_STATEMENT_STYLE",
          "description": "Break line in single \"case\" statement",
          "type": "SimpleEmbeddedStatementStyle",
          "isObsolete": true,
          "defaultValue": "DO_NOT_CHANGE"
        },
        {
          "name": "SIMPLE_EMBEDDED_BLOCK_STYLE",
          "description": "Break line in a block with a single statement",
          "type": "SimpleEmbeddedStatementStyle",
          "isObsolete": true,
          "defaultValue": "LINE_BREAK"
        },
        {
          "name": "SIMPLE_EMBEDDED_STATEMENT_STYLE",
          "description": "Break line in single embedded statement",
          "type": "SimpleEmbeddedStatementStyle",
          "isObsolete": true,
          "defaultValue": "DO_NOT_CHANGE"
        },
        {
          "name": "SPACE_AFTER_AMPERSAND_OP",
          "description": "Unsafe addressof operator (&)",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_AFTER_ASTERIK_OP",
          "description": "Unsafe asterisk operator (*)",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_AFTER_ATTRIBUTE_COLON",
          "description": "After other colons",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AFTER_ATTRIBUTES",
          "description": "After attributes",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AFTER_COLON_IN_CASE",
          "description": "After colon in \"case\" statement",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AFTER_COMMA",
          "description": "After comma",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AFTER_EXTENDS_COLON",
          "description": "After base types list colon",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AFTER_FOR_SEMICOLON",
          "description": "After \"for\" semicolon",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AFTER_LOGICAL_NOT_OP",
          "description": "Logical not operator (!)",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_AFTER_OPERATOR_KEYWORD",
          "description": "After operator keyword",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AFTER_TERNARY_COLON",
          "description": "After ':'",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AFTER_TERNARY_QUEST",
          "description": "After '?'",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AFTER_TYPE_PARAMETER_CONSTRAINT_COLON",
          "description": "After type parameter constraint colon",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AFTER_TYPECAST_PARENTHESES",
          "description": "After type cast parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AFTER_UNARY_MINUS_OP",
          "description": "Unary minus operator (-)",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_AFTER_UNARY_PLUS_OP",
          "description": "Unary plus operator (+)",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_AROUND_ADDITIVE_OP",
          "description": "Additive operators (+,-)",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AROUND_ALIAS_EQ",
          "description": "Around '=' in namespace alias directive",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AROUND_ARROW_OP",
          "description": "Unsafe arrow operator (->)",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_AROUND_ASSIGNMENT_OP",
          "description": "Assignment operators (=,+=,...)",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AROUND_BITWISE_OP",
          "description": "Bitwise operators (&,|,^)",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AROUND_DOT",
          "description": "Around dot",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_AROUND_EQUALITY_OP",
          "description": "Equality operators (==,!=)",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AROUND_LAMBDA_ARROW",
          "description": "Around lambda arrow",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AROUND_LOGICAL_OP",
          "description": "Logical operators (&&,||)",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AROUND_MULTIPLICATIVE_OP",
          "description": "Multiplicative operators (*,/,%)",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AROUND_NULLCOALESCING_OP",
          "description": "Null coalescing operator (??)",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AROUND_RELATIONAL_OP",
          "description": "Relational operators (<,>,<=,>=)",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_AROUND_SHIFT_OP",
          "description": "Shift operators (<<,>>)",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BEFORE_ARRAY_ACCESS_BRACKETS",
          "description": "Before array access brackets",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_ARRAY_RANK_BRACKETS",
          "description": "Before array rank brackets",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_ATTRIBUTE_COLON",
          "description": "Before other colons",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_CATCH_PARENTHESES",
          "description": "\"catch\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BEFORE_CHECKED_PARENTHESES",
          "description": "\"checked\" and \"unchecked\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_COLON_IN_CASE",
          "description": "Before colon in \"case\" statement",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_COMMA",
          "description": "Before comma",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_DEFAULT_PARENTHESES",
          "description": "\"default\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_EMPTY_METHOD_CALL_PARENTHESES",
          "description": "Method call empty parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_EMPTY_METHOD_PARENTHESES",
          "description": "Method declaration empty parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_EXTENDS_COLON",
          "description": "Before base types list colon",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BEFORE_FIXED_PARENTHESES",
          "description": "\"fixed\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BEFORE_FOR_PARENTHESES",
          "description": "\"for\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BEFORE_FOR_SEMICOLON",
          "description": "Before \"for\" semicolon",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_FOREACH_PARENTHESES",
          "description": "\"foreach\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BEFORE_IF_PARENTHESES",
          "description": "\"if\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BEFORE_LOCK_PARENTHESES",
          "description": "\"lock\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BEFORE_METHOD_CALL_PARENTHESES",
          "description": "Method call parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_METHOD_PARENTHESES",
          "description": "Method declaration parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_NAMEOF_PARENTHESES",
          "description": "\"nameof\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_NULLABLE_MARK",
          "description": "Before nullable mark",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_POINTER_ASTERIK_DECLARATION",
          "description": "Before unsafe pointer declaration",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_SEMICOLON",
          "description": "Before semicolon",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_SINGLELINE_ACCESSORHOLDER",
          "description": "Before single line accessors block",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BEFORE_SIZEOF_PARENTHESES",
          "description": "\"sizeof\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_SWITCH_PARENTHESES",
          "description": "\"switch\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BEFORE_TERNARY_COLON",
          "description": "Before ':'",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BEFORE_TERNARY_QUEST",
          "description": "Before '?'",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BEFORE_TRAILING_COMMENT",
          "description": "Before end of line comment",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BEFORE_TYPE_ARGUMENT_ANGLE",
          "description": "Before type argument list angle",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_TYPE_PARAMETER_ANGLE",
          "description": "Before type parameter list angle",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_TYPE_PARAMETER_CONSTRAINT_COLON",
          "description": "Before type parameter constraint colon",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BEFORE_TYPEOF_PARENTHESES",
          "description": "\"typeof\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_BEFORE_USING_PARENTHESES",
          "description": "\"using\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BEFORE_WHILE_PARENTHESES",
          "description": "\"while\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BETWEEN_ACCESSORS_IN_SINGLELINE_PROPERTY",
          "description": "Between accessors in single line property/event",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BETWEEN_ATTRIBUTE_SECTIONS",
          "description": "Between attribute sections",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BETWEEN_KEYWORD_AND_EXPRESSION",
          "description": "Between keyword and expression",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_BETWEEN_KEYWORD_AND_TYPE",
          "description": "Between keyword and type",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_IN_SINGLELINE_ACCESSORHOLDER",
          "description": "Within single line accessor",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_IN_SINGLELINE_ANONYMOUS_METHOD",
          "description": "Within single line anonymous method",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_IN_SINGLELINE_METHOD",
          "description": "Within single line method",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPACE_NEAR_POSTFIX_AND_PREFIX_OP",
          "description": "Before/after ++ and --",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_ARRAY_ACCESS_BRACKETS",
          "description": "Within array access brackets",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_ARRAY_RANK_BRACKETS",
          "description": "Within array rank brackets",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_ARRAY_RANK_EMPTY_BRACKETS",
          "description": "Within array rank empty brackets",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_ATTRIBUTE_BRACKETS",
          "description": "Within attribute brackets",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_CATCH_PARENTHESES",
          "description": "\"catch\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_CHECKED_PARENTHESES",
          "description": "\"checked\" and \"unchecked\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_DEFAULT_PARENTHESES",
          "description": "\"default\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_EMPTY_METHOD_CALL_PARENTHESES",
          "description": "Method call empty parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_EMPTY_METHOD_PARENTHESES",
          "description": "Method declaration empty parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_FIXED_PARENTHESES",
          "description": "\"fixed\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_FOR_PARENTHESES",
          "description": "\"for\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_FOREACH_PARENTHESES",
          "description": "\"foreach\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_IF_PARENTHESES",
          "description": "\"if\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_LOCK_PARENTHESES",
          "description": "\"lock\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_METHOD_CALL_PARENTHESES",
          "description": "Method call parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_METHOD_PARENTHESES",
          "description": "Method declaration parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_NAMEOF_PARENTHESES",
          "description": "\"nameof\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_PARENTHESES",
          "description": "Parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES",
          "description": "Within single-line expression braces",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_SIZEOF_PARENTHESES",
          "description": "\"sizeof\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_SWITCH_PARENTHESES",
          "description": "\"switch\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_TYPE_ARGUMENT_ANGLES",
          "description": "Type argument angles",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_TYPE_PARAMETER_ANGLES",
          "description": "Type parameter angles",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_TYPECAST_PARENTHESES",
          "description": "Type cast parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_TYPEOF_PARENTHESES",
          "description": "\"typeof\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_USING_PARENTHESES",
          "description": "\"using\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHIN_WHILE_PARENTHESES",
          "description": "\"while\" parentheses",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "SPACE_WITHING_EMPTY_BRACES",
          "description": "Space between empty braces",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "SPECIAL_ELSE_IF_TREATMENT",
          "description": "Special \"else if\" treatment",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "STICK_COMMENT",
          "description": "Don't indent comments started at first column",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "TAB_WIDTH",
          "description": "Tab width",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 4
        },
        {
          "name": "TYPE_DECLARATION_BRACES",
          "description": "Type and namespace declaration",
          "type": "BraceFormatStyle",
          "isObsolete": false,
          "defaultValue": "NEXT_LINE"
        },
        {
          "name": "USE_CONTINUOUS_INDENT_INSIDE_INITIALIZER_BRACES",
          "description": "Use continuous line indent inside expression braces",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "USE_CONTINUOUS_INDENT_INSIDE_PARENS",
          "description": "Use continuous line indent inside parenthesis",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "USE_INDENT_FROM_PREVIOUS_ELEMENT",
          "description": "Use previous element's indent on partial format",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "USE_INDENT_FROM_VS",
          "description": "Use indent style and size from Visual Studio",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "WRAP_AFTER_DECLARATION_LPAR",
          "description": "Prefer wrap after \"(\" in declaration",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "WRAP_AFTER_DOT_IN_METHOD_CALLS",
          "description": "Prefer wrap after \".\"",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "WRAP_AFTER_INVOCATION_LPAR",
          "description": "Prefer wrap after \"(\" in invocation",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "WRAP_ARGUMENTS_STYLE",
          "description": "Wrap invocation arguments",
          "type": "WrapStyle",
          "isObsolete": false,
          "defaultValue": "WRAP_IF_LONG"
        },
        {
          "name": "WRAP_ARRAY_INITIALIZER_STYLE",
          "description": "Wrap array initializer",
          "type": "WrapStyle",
          "isObsolete": false,
          "defaultValue": "WRAP_IF_LONG"
        },
        {
          "name": "WRAP_BEFORE_ARROW_WITH_EXPRESSIONS",
          "description": "Prefer wrap before \"=>\" followed by expressions",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "WRAP_BEFORE_BINARY_OPSIGN",
          "description": "Prefer wrap before operator in binary expression",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "WRAP_BEFORE_COMMA",
          "description": "Prefer wrap before \",\"",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "WRAP_BEFORE_DECLARATION_LPAR",
          "description": "Prefer wrap before \"(\" in declaration",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "WRAP_BEFORE_DECLARATION_RPAR",
          "description": "Prefer wrap before \")\" in declaration",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "WRAP_BEFORE_EXTENDS_COLON",
          "description": "Prefer wrap before \":\"",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "WRAP_BEFORE_FIRST_TYPE_PARAMETER_CONSTRAINT",
          "description": "Prefer wrap before first constraint",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "WRAP_BEFORE_INVOCATION_LPAR",
          "description": "Prefer wrap before \"(\" in invocation",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "WRAP_BEFORE_INVOCATION_RPAR",
          "description": "Prefer wrap before \")\" in invocation",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "WRAP_BEFORE_LINQ_EXPRESSION",
          "description": "Prefer wrap before multiline LINQ expressions",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "WRAP_BEFORE_TERNARY_OPSIGNS",
          "description": "Prefer wrap before \"?\" and \":\" in ternary expressions",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "WRAP_BEFORE_TYPE_PARAMETER_LANGLE",
          "description": "Prefer wrap before type parameters opening angle",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": false
        },
        {
          "name": "WRAP_CHAINED_BINARY_EXPRESSIONS",
          "description": "Wrap chained binary expressions",
          "type": "WrapStyleSimple",
          "isObsolete": false,
          "defaultValue": "WRAP_IF_LONG"
        },
        {
          "name": "WRAP_CHAINED_METHOD_CALLS",
          "description": "Wrap chained method calls",
          "type": "WrapStyle",
          "isObsolete": false,
          "defaultValue": "WRAP_IF_LONG"
        },
        {
          "name": "WRAP_ENUM_DECLARATION",
          "description": "Wrap enumeration declaration",
          "type": "WrapStyle",
          "isObsolete": false,
          "defaultValue": "CHOP_ALWAYS"
        },
        {
          "name": "WRAP_EXTENDS_LIST_STYLE",
          "description": "Wrap extends/implements list",
          "type": "WrapStyle",
          "isObsolete": false,
          "defaultValue": "WRAP_IF_LONG"
        },
        {
          "name": "WRAP_FOR_STMT_HEADER_STYLE",
          "description": "Wrap \"for\" statement header",
          "type": "WrapStyle",
          "isObsolete": false,
          "defaultValue": "CHOP_IF_LONG"
        },
        {
          "name": "WRAP_LIMIT",
          "description": "Hard wrap at",
          "type": "Int32",
          "isObsolete": false,
          "defaultValue": 120
        },
        {
          "name": "WRAP_LINES",
          "description": "Wrap long lines",
          "type": "Boolean",
          "isObsolete": false,
          "defaultValue": true
        },
        {
          "name": "WRAP_LINQ_EXPRESSIONS",
          "description": "Wrap LINQ expressions",
          "type": "WrapStyle",
          "isObsolete": false,
          "defaultValue": "CHOP_IF_LONG"
        },
        {
          "name": "WRAP_MULTIPLE_DECLARATION_STYLE",
          "description": "Wrap multiple declaration",
          "type": "WrapStyle",
          "isObsolete": false,
          "defaultValue": "CHOP_IF_LONG"
        },
        {
          "name": "WRAP_MULTIPLE_TYPE_PARAMEER_CONSTRAINTS_STYLE",
          "description": "Wrap multiple type parameter constraints",
          "type": "WrapStyle",
          "isObsolete": false,
          "defaultValue": "CHOP_IF_LONG"
        },
        {
          "name": "WRAP_OBJECT_AND_COLLECTION_INITIALIZER_STYLE",
          "description": "Wrap object and collection initializer",
          "type": "WrapStyle",
          "isObsolete": false,
          "defaultValue": "CHOP_IF_LONG"
        },
        {
          "name": "WRAP_PARAMETERS_STYLE",
          "description": "Wrap formal parameters",
          "type": "WrapStyle",
          "isObsolete": false,
          "defaultValue": "WRAP_IF_LONG"
        },
        {
          "name": "WRAP_SWITCH_EXPRESSION",
          "description": "Wrap switch expression",
          "type": "WrapStyle",
          "isObsolete": false,
          "defaultValue": "CHOP_ALWAYS"
        },
        {
          "name": "WRAP_TERNARY_EXPR_STYLE",
          "description": "Wrap ternary expression",
          "type": "WrapStyle",
          "isObsolete": false,
          "defaultValue": "CHOP_IF_LONG"
        },
        {
          "name": "WRAP_VERBATIM_INTERPOLATED_STRINGS",
          "description": "Wrap verbatim interpolated strings",
          "type": "WrapStyleExpanded",
          "isObsolete": false,
          "defaultValue": "NO_WRAP"
        }
      ]
    }
  }
]
